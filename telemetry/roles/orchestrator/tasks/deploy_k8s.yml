#  Copyright Â© 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---
- name: Create kubespray directory "{{ kubespray_path }}"
  ansible.builtin.file:
    path: "{{ kubespray_path }}"
    state: directory
    mode: "{{ permission_644 }}"

- name: Get kubespray git repo
  block:
    - name: Get kubespray git repo tarball
      ansible.builtin.get_url:
        url: "{{ offline_git_path }}/{{ telemetry_package_map['kubespray'] }}.tar.gz"
        dest: "{{ kubespray_path }}"
        mode: "{{ permission_644 }}"
      failed_when: false
  rescue:
    - name: Fail if unable to get kubespray tar file from local repo
      ansible.builtin.fail:
        msg: "{{ fail_msg_kubespray_not_found }}"

- name: Untar kubespray git repo
  ansible.builtin.unarchive:
    src: "{{ kubespray_path }}/{{ telemetry_package_map['kubespray'] }}.tar.gz"
    dest: "{{ kubespray_path }}"

- name: Add collections path in kubespray ansible.cfg
  community.general.ini_file:
    path: "{{ kubespray_cfg_path }}"
    section: defaults
    option: collections_path
    value: "$VIRTUAL_ENV"
    mode: "{{ permission_644 }}"
    backup: true

- name: Create k8s_var from template
  ansible.builtin.template:
    src: k8s_var.yml.j2
    dest: "{{ role_path }}/files/k8s_var.yml"
    mode: "{{ permission_644 }}"

- name: K8s installation on Omnia Infrastructure Manager (Wait 10 mins for kubernetes installation to complete)
  ansible.builtin.command: >
    ansible-playbook {{ kubespray_path }}/{{ telemetry_package_map['kubespray'] }}/cluster.yml \
    -i {{ role_path }}/files/k8s_inv.ini --extra-vars "@{{ role_path }}/files/k8s_var.yml"
  args:
    chdir: "{{ kubespray_path }}/{{ telemetry_package_map['kubespray'] }}"
  environment:
    HTTP_PROXY: "{{ proxy[0].http_proxy | default('', true) }}"
    HTTPS_PROXY: "{{ proxy[0].https_proxy | default('', true) }}"
    NO_PROXY: "localhost,{{ oim_hostname }},*.{{ oim_domain_name }},{{ oim_ip_addresses | join(',') }},{{ hostvars['localhost']['telemetry_config']['pod_external_ip_range'] }},{{ hostvars['localhost']['telemetry_config']['k8s_service_addresses'] }},{{ hostvars['localhost']['telemetry_config']['k8s_pod_network_cidr'] }}" # noqa: yaml[line-length]
  register: k8s_install
  changed_when: k8s_install.changed
  failed_when: false

- name: Check Kubernetes successfully installed or not
  ansible.builtin.command: kubectl get pod -A
  changed_when: false
  register: kubectl_command_status
  failed_when: false

- name: Kubespray error log if kubernetes installation not successful
  ansible.builtin.lineinfile:
    path: "{{ kubespray_log }}"
    line: "{{ k8s_install.stdout_lines }}"
    state: present
    create: true
    mode: "{{ permission_644 }}"
  when: kubectl_command_status.rc != 0

- name: Fail if Kubernetes installation not successful
  ansible.builtin.fail:
    msg: "{{ fail_msg_kubespray }}"
  when: kubectl_command_status.rc != 0
