#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Check if omnia_vault_key exists
  ansible.builtin.stat:
    path: "{{ role_path }}/../../../input/{{ omnia_config_vaultname }}"
  register: vault_key_result

- name: Create ansible vault key if it does not exist
  ansible.builtin.set_fact:
    vault_key: "{{ lookup('password', '/dev/null chars=ascii_letters') }}"
  when: not vault_key_result.stat.exists

- name: Save vault key
  ansible.builtin.lineinfile:
    path: "{{ role_path }}/../../../input/{{ omnia_config_vaultname }}"
    line: "{{ vault_key }}"
    mode: "{{ vault_key_permission }}"
    owner: root
    create: true
  when: not vault_key_result.stat.exists

- name: Check if omnia config file is encrypted
  ansible.builtin.command: cat {{ role_path }}/../../../input/{{ omnia_config_filename }}
  changed_when: false
  register: config_content
  no_log: true

- name: Decrpyt omnia_config.yml
  ansible.builtin.command: >-
    ansible-vault decrypt {{ role_path }}/../../../input/{{ omnia_config_filename }}
    --vault-password-file {{ role_path }}/../../../input/{{ omnia_config_vaultname }}
  when: "'$ANSIBLE_VAULT;' in config_content.stdout"
  changed_when: true

- name: Include variable file omnia_config.yml
  block:
    - name: Include variable file omnia_config.yml
      ansible.builtin.include_vars:
        file: "{{ role_path }}/../../../input/{{ omnia_config_filename }}"
        name: omnia_config
      register: include_omnia_configc
      no_log: true
  rescue:
    - name: Failed to include omnia_config.yml
      ansible.builtin.fail:
        msg: "{{ omnia_config_syntax_fail_msg }} Error: {{ include_omnia_config.message }}"

- name: Validate input parameters are not empty
  ansible.builtin.fail:
    msg: "{{ input_config_failure_msg }}"
  register: input_config_check
  when:
    - omnia_config.ansible_config_file_path | default("", true) | length < 1

- name: Validate input parameters are not empty
  ansible.builtin.fail:
    msg: " {{ slurm_installation_type_empty_failure_msg }}"
  register: input_config_check
  when:
    - omnia_config.slurm_installation_type | default("", true) | length < 1

- name: Validate input parameters are mentioned properly for slurm installation type
  ansible.builtin.fail:
    msg: " {{ slurm_installation_type_wrong_failure_msg }}"
  register: input_config_check
  when:
    - omnia_config.slurm_installation_type | default("", true) not in ["nfs_share", "configless"]

- name: Assert mariadb_password
  ansible.builtin.assert:
    that:
      - omnia_config.mariadb_password | default("", true) | length > 1
      - omnia_config.mariadb_password | length > min_length | int - 1
      - omnia_config.mariadb_password | length < max_length | int + 1
      - '"-" not in omnia_config.mariadb_password '
      - '"\\" not in omnia_config.mariadb_password '
      - '"\"" not in omnia_config.mariadb_password '
      - " \"'\" not in omnia_config.mariadb_password "
    success_msg: "{{ success_msg_mariadb_password }}"
    fail_msg: "{{ fail_msg_mariadb_password }}"
  when: slurm_support

- name: Verify the value of restart_slurm_services
  ansible.builtin.assert:
    that:
      - omnia_config.restart_slurm_services == true or omnia_config.restart_slurm_services == false
    success_msg: "{{ restart_services_success_msg }}"
    fail_msg: "{{ restart_services_failure_msg }}"
  when: slurm_support

- name: Check virtual ENV
  ansible.builtin.set_fact:
    venv_path: "{{ lookup('ansible.builtin.env', 'VIRTUAL_ENV') }}"

- name: Validate k8s_support variable
  when: k8s_support
  block:
    - name: Assert supported kubernetes version
      ansible.builtin.assert:
        that:
          - k8s_version | default("", false) | length > 1
          - "( 'omnia171_venv' in venv_path and '{{ omnia171_k8s_version }}' in k8s_version)" # noqa: yaml[line-length]
        success_msg: "{{ success_msg_k8s_version }}"
        fail_msg: "{{ fail_msg_k8s_version }}"

    - name: Assert kubernetes cni
      ansible.builtin.assert:
        that:
          - omnia_config.k8s_cni | default("", true) | length > 1
          - "('calico' in omnia_config.k8s_cni) or ('flannel' in omnia_config.k8s_cni)"
        success_msg: "{{ success_msg_k8s_cni }}"
        fail_msg: "{{ fail_msg_k8s_cni }}"

    - name: Assert pod external IP range
      ansible.builtin.assert:
        that:
          - omnia_config.pod_external_ip_range | default("", true) | length > 9
          - ("'/' in omnia_config.pod_external_ip_range") or ("'-' in omnia_config.pod_external_ip_range")
        success_msg: "{{ success_msg_pod_external_ip_range }}"
        fail_msg: "{{ fail_msg_pod_external_ip_range }}"

    - name: Assert kubernetes service addresses
      ansible.builtin.assert:
        that:
          - omnia_config.k8s_service_addresses | default("", true) | length > 9
          - '"/" in omnia_config.k8s_service_addresses'
        success_msg: "{{ success_msg_k8s_service_addresses }}"
        fail_msg: "{{ fail_msg_k8s_service_addresses }}"

    - name: Assert kubernetes pod network CIDR
      ansible.builtin.assert:
        that:
          - omnia_config.k8s_pod_network_cidr | default("", true) | length > 9
          - '"/" in omnia_config.k8s_pod_network_cidr'
        success_msg: "{{ success_msg_k8s_pod_network_cidr }}"
        fail_msg: "{{ fail_msg_k8s_pod_network_cidr }}"

    - name: Assert kubernetes topology manager policy
      ansible.builtin.assert:
        that:
          - omnia_config.topology_manager_policy | default("", true) | length > 1
          - "omnia_config.topology_manager_policy in supported_topology_manager_policy"
        success_msg: "{{ success_msg_k8s_toplogy_manager_policy }}"
        fail_msg: "{{ fail_msg_k8s_toplogy_manager_policy }}"

    - name: Assert kubernetes topology manager scope
      ansible.builtin.assert:
        that:
          - omnia_config.topology_manager_scope | default("", true) | length > 1
          - "omnia_config.topology_manager_scope in supported_topology_manager_scope"
        success_msg: "{{ success_msg_k8s_toplogy_manager_scope }}"
        fail_msg: "{{ fail_msg_k8s_toplogy_manager_scope }}"

- name: Initialize flag for csi powerscale driver installation
  ansible.builtin.set_fact:
    csi_driver_powerscale_precheck_pass: false

- name: Validate nvidia gpu operator variables
  when: nvidia_gpu_operator_support
  block:
    - name: Validate that nvidia_gpu_operator_value_file_path contains a valid path
      ansible.builtin.assert:
        that:
          - nvidia_gpu_operator_value_file_path is defined
          - nvidia_gpu_operator_value_file_path | length > 0
          - '".yml" or ".yaml" in nvidia_gpu_operator_value_file_path'
        success_msg: "{{ nvidia_gpu_operator_value_file_path_success_msg }}"
        fail_msg: "{{ nvidia_gpu_operator_value_file_path_fail_msg }}"

    - name: Verify the nvidia_gpu_operator_value_file_path
      ansible.builtin.stat:
        path: "{{ nvidia_gpu_operator_value_file_path }}"
      register: result_path_nvidia_gpu_operator_value_file_path

    - name: Assert nvidia_gpu_operator_value_file_path location
      ansible.builtin.fail:
        msg: "{{ nvidia_gpu_operator_value_file_path_missing_msg }}"
      when: not result_path_nvidia_gpu_operator_value_file_path.stat.exists

- name: Validate csi powerscale variables
  when: csi_driver_powerscale_support
  block:
    - name: Validate that csi_powerscale_driver_secret_file_path contains a valid path
      ansible.builtin.assert:
        that:
          - omnia_config.csi_powerscale_driver_secret_file_path is defined
          - omnia_config.csi_powerscale_driver_secret_file_path | length > 0
        success_msg: "{{ csi_driver_secret_file_path_success_msg }}"
        fail_msg: "{{ csi_driver_secret_file_path_fail_msg }}"

    - name: Validate that csi_powerscale_driver_values_file_path contains a valid path
      ansible.builtin.assert:
        that:
          - omnia_config.csi_powerscale_driver_values_file_path is defined
          - omnia_config.csi_powerscale_driver_values_file_path | length > 0
        success_msg: "{{ csi_driver_values_file_path_success_msg }}"
        fail_msg: "{{ csi_driver_values_file_path_fail_msg }}"

    - name: Validate user input for csi powerscale driver
      ansible.builtin.include_tasks: csi_powerscale_driver_input_validation.yml

    - name: Set flag for csi powerscale driver installation to true after assertion pass
      ansible.builtin.set_fact:
        csi_driver_powerscale_precheck_pass: true

- name: Set facts for non common variables with telemetry config
  ansible.builtin.set_fact:
    ansible_config_file_path: "{{ omnia_config.ansible_config_file_path }}"
    mariadb_password: "{{ omnia_config.mariadb_password }}"
    slurm_installation_type: "{{ omnia_config.slurm_installation_type }}"
    restart_slurm_services: "{{ omnia_config.restart_slurm_services }}"
    topology_manager_policy: "{{ omnia_config.topology_manager_policy }}"
    topology_manager_scope: "{{ omnia_config.topology_manager_scope }}"
    run_intel_gaudi_tests: "{{ omnia_config.run_intel_gaudi_tests | default(false) }}"
    csi_powerscale_driver_secret_file_path: "{{ omnia_config.csi_powerscale_driver_secret_file_path }}"
    csi_powerscale_driver_values_file_path: "{{ omnia_config.csi_powerscale_driver_values_file_path }}"

- name: Encrypt input config file
  ansible.builtin.command: >-
    ansible-vault encrypt {{ role_path }}/../../../input/{{ omnia_config_filename }}
    --vault-password-file {{ role_path }}/../../../input/{{ omnia_config_vaultname }}
  changed_when: false
