# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

---

- name: Set Admin IP
  ansible.builtin.set_fact:
    admin_nic_ip: "{{ hostvars['localhost']['admin_nic_ip'] }}"

- name: Wait till xcat-init.bash execution is completed (This task may take 10 mins)
  ansible.builtin.wait_for:
    path: "{{ xcat_init_finished }}"
    state: present
    timeout: "{{ wait_time_xcat_init }}"
    msg: "{{ xcat_init_failed_msg }}"
  register: wait_result

- name: Setup postgres database (This task may take 10 mins)
  ansible.builtin.command: "{{ pgsqlsetup_path }} -i -l {{ admin_nic_ip }} -V"
  changed_when: true
  no_log: true
  environment:
    XCATPGPW: "{{ hostvars['localhost']['postgresdb_password'] }}"

- name: Start and enable xcat services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items: "{{ xcat_services }}"

- name: Reload systemd
  ansible.builtin.systemd:
    daemon-reload: true

- name: Remove .postgres directory
  ansible.builtin.file:
    path: "{{ postgres_file_path }}"
    state: absent
  failed_when: false

- name: Create .postgres directory
  ansible.builtin.file:
    path: "{{ postgres_file_path }}"
    state: directory
    mode: "{{ directory_permissions }}"

- name: Get encrypted_file status
  ansible.builtin.stat:
    path: "{{ encrypted_file_path }}"
  register: key_status

- name: Invoke python utility to generate key if not exists
  ansible.builtin.command: |
    {{ python_version }} {{ utility_path }} {{ hostvars['localhost']['postgresdb_password'] }}
  changed_when: false
  no_log: true
  when: not key_status.stat.exists

- name: Set default update variables
  ansible.builtin.set_fact:
    pg_hba_conf_update: false
    postgresql_conf_updated: false
    pg_hba_conf_admin_update: false
    cfgloc_updated: false

- name: Read cfgloc file
  ansible.builtin.slurp:
    path: "{{ cfgloc_path }}"
  register: cfgloc_content

- name: Update cfgloc with correct host IP
  ansible.builtin.replace:
    path: "{{ cfgloc_path }}"
    regexp: "(?<=host=)[^|]+"
    replace: "{{ admin_nic_ip }}"
  register: cfgloc_updated
  when: "admin_nic_ip not in cfgloc_content.content | b64decode"

- name: Read postgresql.conf file
  ansible.builtin.slurp:
    path: "{{ postgresql_conf_path }}"
  register: postgresql_conf_content

- name: Ensure listen_addresses contains admin_nic_ip
  ansible.builtin.replace:
    path: "{{ postgresql_conf_path }}"
    regexp: "^(listen_addresses\\s*=\\s*'[^']*)'"
    replace: "\\1,{{ admin_nic_ip }}'"
  register: postgresql_conf_updated
  when: "admin_nic_ip not in postgresql_conf_content.content | b64decode"

- name: Read pg_hba_conf file
  ansible.builtin.slurp:
    path: "{{ pg_hba_conf_path }}"
  register: pg_hba_conf_content

- name: Set pg_hba_conf_update status
  ansible.builtin.set_fact:
    pg_hba_conf_update: "{{ pg_hba_conf_content.content | b64decode | regex_search('^local\\s+all\\s+all\\s+md5', multiline=True) is not none }}"
    pg_hba_conf_admin_update: >-
      {{ pg_hba_conf_content.content | b64decode |
      regex_search('^host\s+all\s+all\s+' ~ admin_nic_ip ~ '/32\s+md5',
      multiline=True) is not none }}

- name: Check pg_hba_conf_update status
  when: not pg_hba_conf_update
  block:
    # Set PostgreSQL password for postgres user
    - name: Set PostgreSQL password for postgres user
      become: true
      become_user: postgres
      ansible.builtin.shell: |
        set -o pipefail && \
        echo "ALTER USER postgres WITH PASSWORD '{{ hostvars['localhost']['postgresdb_password'] }}';" | psql
      no_log: true
      changed_when: false
      register: postgresdb_config

    - name: Replace peer with md5 in pg_hba.conf
      ansible.builtin.replace:
        path: "{{ pg_hba_conf_path }}"
        regexp: "^local(.*)all(.*)all(.*)"
        replace: "local   all             all                                     md5"
      register: pg_hba_conf_update
      when: not pg_hba_conf_update

  rescue:
    - name: Failed to set PostgreSQL password for postgres user
      when:
        - postgresdb_config.module_error is defined
        - postgresdb_config.module_error | length > 0
      ansible.builtin.fail:
        msg: "{{ postgres_set_password_fail_msg }} Error: {{ postgresdb_config.module_error }}"

- name: Ensure host entry exists in pg_hba.conf
  ansible.builtin.lineinfile:
    path: "{{ pg_hba_conf_path }}"
    line: "host    all          all        {{ admin_nic_ip }}/32      md5"
    state: present
    insertafter: "^# IPv4 local connections:"
    regexp: "^host\\s+all\\s+all\\s+{{ admin_nic_ip }}/32\\s+md5"
  register: pg_hba_conf_admin_update
  when: not pg_hba_conf_admin_update

- name: Restart PostgreSQL service
  ansible.builtin.systemd:
    name: postgresql
    state: restarted
  when: # noqa: no-handler
    - pg_hba_conf_update.changed or pg_hba_conf_admin_update.changed or postgresql_conf_updated.changed

- name: Restart xcatd service
  ansible.builtin.systemd:
    name: xcatd
    state: restarted
  when: cfgloc_updated.changed # noqa: no-handler
