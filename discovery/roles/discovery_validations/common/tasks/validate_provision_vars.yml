# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Initialize supported_os_version_status
  ansible.builtin.set_fact:
    supported_os_version_status: false

- name: Set provision_os in lowercase
  ansible.builtin.set_fact:
    provision_os: "{{ provision_os | lower }}"

- name: Validate input parameters of provision vars are not empty
  ansible.builtin.fail:
    msg: "{{ input_provision_fail_msg }}"
  when:
    - timezone | default("", true) | length < 1 or
      language | default("", true) | length < 1 or
      default_lease_time | default("", true) | string | length < 1

- name: Validate default lease time
  ansible.builtin.assert:
    that:
      - default_lease_time|int
      - default_lease_time|int <= 31536000
      - default_lease_time|int >= 21600
    success_msg: "{{ default_lease_time_success_msg }}"
    fail_msg: "{{ default_lease_time_fail_msg }}"

- name: Assert that disk_partition does not have duplicate entries
  ansible.builtin.assert:
    that:
      - disk_partition | map(attribute='mount_point')| list | unique | length == disk_partition | map(attribute='mount_point')| list | length
    success_msg: "{{ disk_partition_success_msg }}"
    fail_msg: "{{ disk_partition_fail_msg }}"

- name: Convert timezone.txt to linux format
  ansible.builtin.command: dos2unix {{ timezone_file_path }}
  failed_when: false
  changed_when: false

- name: Searching for timezone
  ansible.builtin.lineinfile:
    path: "{{ timezone_file_path }}"
    line: "{{ timezone }}"
    state: present
  check_mode: true
  register: timezone_search

- name: Assert timezone
  ansible.builtin.assert:
    that: timezone_search is not changed
    success_msg: "{{ timezone_success_msg }}"
    fail_msg: "{{ timezone_fail_msg }}"
  register: timezone_check

- name: Assert language for provisioning nodes
  ansible.builtin.fail:
    msg: "{{ language_fail_msg }}"
  when: '"en-US" not in language'

- name: Assert provision_os for RHEL Omnia Infrastructure Manager
  ansible.builtin.assert:
    that:
      - provision_os | lower == os_supported_rhel
    success_msg: "{{ provision_os_success_msg }}"
    fail_msg: "{{ provision_os_fail_msg }}"

- name: Set supported_os_version_status to true - rhel
  ansible.builtin.set_fact:
    supported_os_version_status: true
  with_items: "{{ supported_rhel_os_version }}"
  when:
    - provision_os_version | string  == item | string
    - provision_os | lower == os_supported_rhel

- name: Validate provision_os_version is supported
  ansible.builtin.fail:
    msg: "{{ provision_os_version_fail_msg }}"
  when: not supported_os_version_status

- name: Validate ubuntu_kernel_flavor
  ansible.builtin.assert:
    that:
      - ubuntu_kernel_flavor == "hwe" or ubuntu_kernel_flavor == "generic"
    fail_msg: "{{ ubuntu_kernel_fail_msg }}"
  when:
    - provision_os | lower == os_supported_ubuntu
    - provision_os_version | string == ubuntu22_version
    - ubuntu_kernel_flavor is defined

- name: Assert ntp_support
  ansible.builtin.assert:
    that:
      - ntp_support == true or ntp_support == false
    fail_msg: "{{ ntp_support_fail_msg }}"
